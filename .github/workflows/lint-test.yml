name: Lint and Test

on:
  push:
    branches:
      - master
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/lint-test.yml'
  pull_request:
    branches:
      - master
    paths:
      - '**.py'
      - 'requirements.txt'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8
          
      - name: Check code formatting
        run: |
          black --check .
          isort --check-only --profile black .
          flake8 .

  format:
    name: Format Code
    needs: lint
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && failure('lint')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install formatting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort
          
      - name: Format code
        run: |
          black .
          isort --profile black .
          
      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git diff --quiet || (git add . && git commit -m "Auto-format code" && git push)

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false